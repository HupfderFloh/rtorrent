# Maximum and minimum number of peers to connect to per torrent.
#min_peers = 40
#max_peers = 250

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = -1
max_peers_seed = -1

# Maximum number of simultanious uploads per torrent.
max_uploads = 50

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 500

# Default directory to save the downloaded torrents.
directory = /root/mounted/incomplete

# Default session directory. Make sure you don't run multiple instance
# of seeder1rent using the same session directory. Perhaps using a
# relative path?
session = /session

# Watch a directory for new torrents, and stop those that have been
# deleted.
#schedule = watch_directory,5,5,"load_start=/root/mounted/watch/*.torrent,d.delete_tied="
schedule = untied_directory,5,5,stop_untied=

# Custom watch directories
#schedule = watch_directory_1,10,10,"load_start=/root/mounted/watch/movies/*.torrent,d.set_custom1=/root/mounted/done/movies"
#schedule = watch_directory_2,10,10,"load_start=/root/mounted/watch/series/*.torrent,d.set_custom1=/root/mounted/done/series"
#schedule = watch_directory_3,10,10,"load_start=/root/mounted/watch/music/*.torrent,d.set_custom1=/root/mounted/done/music"
#schedule = watch_directory_3,10,10,"load_start=/root/mounted/watch/other/*.torrent,d.set_custom1=/root/mounted/done/other"

#system.method.insert=checkdirs1,simple,"not=\"$equal={d.get_custom1=,d.get_base_path=}\""
#system.method.insert=movecheck1,simple,"and={checkdirs1=,d.get_complete=,d.get_custom1=}"
#system.method.insert=movedir1,simple,"d.set_directory=$d.get_custom1=;execute=mv,-u,$d.get_base_path=,$d.get_custom1=;d.set_custom1=;d.stop=;d.start="
#system.method.set_key=event.download.hash_done,move_hashed1,"branch={$movecheck1=,movedir1=}"


# Add new method to get finished dir
system.method.insert = d.get_finished_dir,simple,"cat=/root/mounted/done/,$d.get_custom1="
system.method.set_key = event.download.finished,move_complete,"d.set_directory=$d.get_finished_dir=;execute=mkdir,-p,$d.get_finished_dir=;execute=mv,-u,$d.get_base_path=,$d.get_finished_dir="
# Custom watch directories
schedule = watch_directory_1,5,60,"load_start=/root/mounted/watch/movies/*.torrent,d.set_custom1=movies"
schedule = watch_directory_2,5,60,"load_start=/root/mounted/watch/series/*.torrent,d.set_custom1=series"
schedule = watch_directory_3,5,60,"load_start=/root/mounted/watch/music/*.torrent,d.set_custom1=music"
schedule = watch_directory_4,5,60,"load_start=/root/mounted/watch/other/*.torrent,d.set_custom1=other"

# Close torrents when diskspace is low. */
schedule = low_diskspace,5,60,close_low_diskspace=100M

# Stop torrents when reaching upload ratio in percent,
# when also reaching total upload in bytes, or when
# reaching final upload ratio in percent.
# example: stop at ratio 2.0 with at least 200 MB uploaded, or else ratio 20.0
#schedule = ratio,60,60,stop_on_ratio=200,200M,2000


# When the torrent finishes, it executes "mv -n <base_path> ~/Download/"
# and then sets the destination directory to "~/Download/". (0.7.7+)
#on_finished = move_complete,"execute=mv,-u,$d.get_base_path=,~/rtorrent/complete/ ;d.set_directory=~/rtorrent/complete/"

#system.method.set_key = event.download.finished,move_complete,"d.set_custom=donedir, /root/mounted/complete/; execute=mkdir, -p, $d.get_custom=donedir; d.set_directory=/root/mounted/download/; execute=mv, -u, \"$cat=$d.get_base_path=, $d.get_name=\", \"$cat=donedir, $d.get_name=\""



# Port range to use for listening.
port_range = 63256-63256

# Start opening ports at a random position within the port range.
#port_random = yes

scgi_port = 0.0.0.0:5000

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = yes

# Set whetever the client should try to connect to UDP trackers.
#use_udp_trackers = no

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
encryption = allow_incoming,enable_retry,prefer_plaintext

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
#
dht = disable
 
# UDP port to use for DHT.
#
# dht_port = 6881
 
# Enable peer exchange (for torrents not marked private)
#
peer_exchange = no
